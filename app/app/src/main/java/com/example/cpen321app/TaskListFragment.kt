import android.app.AlertDialog
import android.os.Bundle
import android.view.LayoutInflater
import android.view.MenuItem
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.PopupMenu
import android.widget.PopupWindow
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.cpen321app.MainActivity
import com.example.cpen321app.R
import com.example.cpen321app.Task
import com.example.cpen321app.TaskAdapter
import com.example.cpen321app.TaskViewModel

// Generated by Copilot
class TaskListFragment : Fragment(), TaskAdapter.OnItemLongClickListener {

//    private val taskList = mutableListOf(
//        Task("1", "Visit Canadian Tire", "15/03/2025", 4, 49.2099188, -123.1075474, 1, "Pick up new summer tires"),
//        Task("2", "Grocery Shopping", "28/02/2025", 4, 49.2085271,-123.0996029, 1, "Buy Groceries"),
//        Task("3", "CPEN 321 Midterm Pick Up", "28/02/2025", 4, 49.2624275, -123.2502343, 1, "Pick up my midterm 1 from Professor's office")
//    )

    private lateinit var recyclerView: RecyclerView
    private lateinit var taskAdapter: TaskAdapter
    private lateinit var taskViewModel: TaskViewModel

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        val view = inflater.inflate(R.layout.fragment_task_list, container, false)

        // Obtain the ViewModel
        taskViewModel = ViewModelProvider(requireActivity()).get(TaskViewModel::class.java)

        // Initialize RecyclerView
        recyclerView = view.findViewById(R.id.recyclerView)
        recyclerView.layoutManager = LinearLayoutManager(activity)
        taskAdapter = TaskAdapter(taskViewModel.taskList.value ?: mutableListOf(), this, requireContext())
        recyclerView.adapter = taskAdapter

        // Observe changes in the task list
        taskViewModel.taskList.observe(viewLifecycleOwner, { tasks ->
            taskAdapter.notifyDataSetChanged()
        })

        return view
    }

    override fun onItemLongClick(task: Task): Boolean {

        // Inflate the popup menu layout
        val popupView = LayoutInflater.from(requireContext()).inflate(R.layout.popup_menu, null)

        // Create the PopupWindow
        val popupWindow = PopupWindow(popupView, ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT, true)

        // Set click listeners for the buttons
        val updateButton: Button = popupView.findViewById(R.id.update_button)
        val deleteButton: Button = popupView.findViewById(R.id.delete_button)

        updateButton.setOnClickListener {
            // Handle the update action
            Toast.makeText(requireContext(), "Update action", Toast.LENGTH_SHORT).show()
            popupWindow.dismiss()
        }

        deleteButton.setOnClickListener {
            // Handle the delete action
            taskViewModel.deleteTask(task)
            Toast.makeText(requireContext(), "Task deleted", Toast.LENGTH_SHORT).show()
            popupWindow.dismiss()
        }

        // Show the PopupWindow
        popupWindow.showAtLocation(view, android.view.Gravity.BOTTOM, 0, 0)

        return true

//        // Create a PopupMenu
//        val popupMenu = PopupMenu(requireContext(), view)
//        popupMenu.inflate(R.menu.task_options_menu)
//
//        // Set click listener for menu items
//        popupMenu.setOnMenuItemClickListener { menuItem: MenuItem ->
//            when (menuItem.itemId) {
//                R.id.action_update -> {
//                    // Handle update task action
//                    Toast.makeText(requireContext(), "Update Task selected", Toast.LENGTH_SHORT).show()
//                    true
//                }
//                R.id.action_delete -> {
//                    // Handle delete task action
//                    val index = taskList.indexOf(task)
//                    taskList.remove(task)
//                    taskAdapter.notifyItemRemoved(index)
//                    Toast.makeText(requireContext(), "Task deleted", Toast.LENGTH_SHORT).show()
//                    true
//                }
//                else -> false
//            }
//        }
//
//        popupMenu.show()

//        // Inflate the custom layout for the dialog buttons
//        val dialogView = LayoutInflater.from(requireContext()).inflate(R.layout.diaglog_buttons, null)
//        val positiveButton: Button = dialogView.findViewById(R.id.button_positive)
//        val negativeButton: Button = dialogView.findViewById(R.id.button_negative)
//
//        // Create the dialog
//        val dialog = AlertDialog.Builder(requireContext())
//            .setTitle("Delete Task")
//            .setMessage("Are you sure you want to delete this task?")
//            .setView(dialogView)
//            .create()
//
//        positiveButton.setOnClickListener {
//
//            // Send a delete message to the back end.
//
//            val index = taskList.indexOf(task)
//            taskList.remove(task)
//            taskAdapter.notifyItemRemoved(index)
//            Toast.makeText(requireContext(), "Task deleted", Toast.LENGTH_SHORT).show()
//            dialog.dismiss()
//        }
//
//        negativeButton.setOnClickListener {
//            dialog.dismiss()
//        }
//
//        dialog.show()

        return true
    }
}