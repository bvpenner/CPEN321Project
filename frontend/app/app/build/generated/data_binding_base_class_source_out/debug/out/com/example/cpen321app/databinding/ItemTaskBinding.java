// Generated by view binder compiler. Do not edit!
package com.example.cpen321app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cpen321app.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemTaskBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final CheckBox checkBoxSelect;

  @NonNull
  public final MaterialCardView itemTaskCard;

  @NonNull
  public final Switch switchGeofence;

  @NonNull
  public final TextView taskDescription;

  @NonNull
  public final TextView taskEnd;

  @NonNull
  public final TextView taskName;

  @NonNull
  public final TextView taskPriority;

  @NonNull
  public final TextView taskStart;

  private ItemTaskBinding(@NonNull MaterialCardView rootView, @NonNull CheckBox checkBoxSelect,
      @NonNull MaterialCardView itemTaskCard, @NonNull Switch switchGeofence,
      @NonNull TextView taskDescription, @NonNull TextView taskEnd, @NonNull TextView taskName,
      @NonNull TextView taskPriority, @NonNull TextView taskStart) {
    this.rootView = rootView;
    this.checkBoxSelect = checkBoxSelect;
    this.itemTaskCard = itemTaskCard;
    this.switchGeofence = switchGeofence;
    this.taskDescription = taskDescription;
    this.taskEnd = taskEnd;
    this.taskName = taskName;
    this.taskPriority = taskPriority;
    this.taskStart = taskStart;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemTaskBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemTaskBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_task, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemTaskBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.checkBox_select;
      CheckBox checkBoxSelect = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxSelect == null) {
        break missingId;
      }

      MaterialCardView itemTaskCard = (MaterialCardView) rootView;

      id = R.id.switch_geofence;
      Switch switchGeofence = ViewBindings.findChildViewById(rootView, id);
      if (switchGeofence == null) {
        break missingId;
      }

      id = R.id.taskDescription;
      TextView taskDescription = ViewBindings.findChildViewById(rootView, id);
      if (taskDescription == null) {
        break missingId;
      }

      id = R.id.taskEnd;
      TextView taskEnd = ViewBindings.findChildViewById(rootView, id);
      if (taskEnd == null) {
        break missingId;
      }

      id = R.id.taskName;
      TextView taskName = ViewBindings.findChildViewById(rootView, id);
      if (taskName == null) {
        break missingId;
      }

      id = R.id.taskPriority;
      TextView taskPriority = ViewBindings.findChildViewById(rootView, id);
      if (taskPriority == null) {
        break missingId;
      }

      id = R.id.taskStart;
      TextView taskStart = ViewBindings.findChildViewById(rootView, id);
      if (taskStart == null) {
        break missingId;
      }

      return new ItemTaskBinding((MaterialCardView) rootView, checkBoxSelect, itemTaskCard,
          switchGeofence, taskDescription, taskEnd, taskName, taskPriority, taskStart);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
